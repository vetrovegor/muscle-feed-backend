openapi: 3.0.0
info:
  title: Muscle Feed
  version: 1.0.0
  description: API Documentation for Muscle Feed backend
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        isVerified:
          type: boolean
        roles:
          type: array
          items:
            enum:
              - ADMIN
              - MODERATOR
        firstName:
          type: string
          example: Rob
        lastName:
          type: string
          example: Top
        phone:
          type: string
          example: +79123456789
        allergies:
          type: string
          example: "Морковь"
    AuthDto:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDto"
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ4Y3Jvd25sZXNzQG1haWwucnUiLCJyb2xlcyI6WyJBRE1JTiJdLCJpYXQiOjE3Mzg1OTQxNzMsImV4cCI6ODgxMzg1OTQxNzN9.dmQAXWl2nvmgrKjL41XsuQXkC7efWpaNwYD9yuW9Bfc
    FileDto:
      type: object
      properties:
        url:
          type: string
          example: http://localhost:8080/api/static/42c193f6-1ccc-4376-aef7-4f302817adc3.png
        name:
          type: string
          example: dog.jpeg
        type:
          type: string
          example: image/png
        size:
          type: integer
          example: 100500
    TeamRequestDto:
      type: object
      properties:
        picture:
          type: string
          example: http://localhost:8080/api/static/42c193f6-1ccc-4376-aef7-4f302817adc3.png
        roleRu:
          type: string
          example: Бармен
        roleHe:
          type: string
          example: ברמן
        nameRu:
          type: string
          example: Дмитрий Сидоров
        nameHe:
          type: string
          example: דימיטרי סידורוב
        descriptionRu:
          type: string
          example: Профессиональный бармен, который умеет создавать уникальные коктейли и всегда поддерживает атмосферу в баре.
        descriptionHe:
          type: string
          example: ברמן מקצועי שיודע ליצור קוקטיילים ייחודיים ומתחזק את האווירה בבר
      required:
        - picture
        - roleRu
        - roleHe
        - nameRu
        - nameHe
        - descriptionRu
        - descriptionHe
    TeamResponseDto:
      type: object
      properties:
        id:
          type: integer
        picture:
          type: string
          example: http://localhost:8080/api/static/42c193f6-1ccc-4376-aef7-4f302817adc3.png
        role:
          type: object
          properties:
            ru:
              type: string
              example: Бармен
            he:
              type: string
              example: ברמן
        name:
          type: object
          properties:
            ru:
              type: string
              example: Дмитрий Сидоров
            he:
              type: string
              example: דימיטרי סידורוב
        description:
          type: object
          properties:
            ru:
              type: string
              example: Профессиональный бармен, который умеет создавать уникальные коктейли и всегда поддерживает атмосферу в баре.
            he:
              type: string
              example: ברמן מקצועי שיודע ליצור קוקטיילים ייחודיים ומתחזק את האווירה בבר
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AddressRequestDto:
      type: object
      properties:
        city:
          type: string
          example: Новосибирск
        street:
          type: string
          example: ул. Советская
        house:
          type: string
          example: 33/1
        floor:
          type: number
        apartment:
          type: number
      required:
        - city
        - street
        - house
    AddressResponseDto:
      type: object
      properties:
        id:
          type: number
        city:
          type: string
          example: Новосибирск
        street:
          type: string
          example: ул. Советская
        house:
          type: string
          example: 33/1
        floor:
          type: number
        apartment:
          type: number
        isPrimary:
          type: boolean
    ReviewResponseDto:
      type: object
      properties:
        id:
          type: number
        picture:
          type: string
          example: http://localhost:8080/api/static/42c193f6-1ccc-4376-aef7-4f302817adc3.png
        author:
          type: object
          properties:
            ru:
              type: string
              example: Иван
            he:
              type: string
              example: יִשְׂרָאֵל
        text:
          type: object
          properties:
            ru:
              type: string
              example: Прекрасный отзыв!
            he:
              type: string
              example: ביקורת נהדרת!
    AdminReviewRequestDto:
      type: object
      properties:
        picture:
          type: string
          example: http://localhost:8080/api/static/42c193f6-1ccc-4376-aef7-4f302817adc3.png
        authorRu:
          type: string
          example: Иван
        authorHe:
          type: string
          example: יִשְׂרָאֵל
        textRu:
          type: string
          example: Прекрасный отзыв!
        textHe:
          type: string
          example: ביקורת נהדרת!
        isPublished:
          type: boolean
    DishRequestDto:
      type: object
      properties:
        adminName:
          type: string
          example: "Стейк с картофелем"
        nameRu:
          type: string
          example: "Стейк с картофелем"
        nameHe:
          type: string
          example: "סטייק עם תפוחי אדמה"
        dishTypeId:
          type: integer
        picture:
          type: string
          example: "http://localhost:8080/static/7fbe6f80-800e-4520-9580-e60e3c93fc20.png"
        descriptionRu:
          type: string
          example: "Сочный стейк с картофельным пюре и овощами."
        descriptionHe:
          type: string
          example: "סטייק עסיסי עם פירה תפוחי אדמה וירקות."
        calories:
          type: integer
        weight:
          type: integer
        proteins:
          type: number
        fats:
          type: number
        carbohydrates:
          type: number
        isPublished:
          type: boolean
        benefit:
          type: string
          example: "Польза"
    DishTypeResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: object
          properties:
            ru:
              type: string
              example: "Завтрак"
            he:
              type: string
              example: "ארוחת בוקר"
    DishResponseDto:
      type: object
      properties:
        id:
          type: integer
        adminName:
          type: string
          example: "Стейк с картофелем"
        dishType:
            $ref: "#/components/schemas/DishTypeResponseDto"
        picture:
          type: string
          example: "http://localhost:8080/static/7fbe6f80-800e-4520-9580-e60e3c93fc20.png"
        calories:
          type: integer
        weight:
          type: integer
        proteins:
          type: number
        fats:
          type: number
        carbohydrates:
          type: number
        isActive:
          type: boolean
        name:
          type: object
          properties:
            ru:
              type: string
              example: "Стейк с картофелем"
            he:
              type: string
              example: "סטייק עם תפוחי אדמה"
        description:
          type: object
          properties:
            ru:
              type: string
              example: "Сочный стейк с картофельным пюре и овощами."
            he:
              type: string
              example: "סטייק עסיסי עם פירה תפוחי אדמה וירקות."
        benefit:
          type: string
          example: "Польза"
    PaginationBodyFields:
      type: object
      properties:
        elementsCount:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        isLast:
          type: boolean
  parameters:
    Page:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 1
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 5
  requestBodies:
    Team:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TeamRequestDto"
    Address:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AddressRequestDto"
    AdminReview:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AdminReviewRequestDto"
    Dish:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishRequestDto"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

security:
  - BearerAuth: []

paths:
  /api/ping:
    get:
      tags:
        - Health
      security: []
      responses:
        "200":
          description: "Success"
  /api/auth/register:
    post:
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  example: 2LQ9VRVCQ
                language:
                  type: string
                  enum:
                    - RU
                    - HE
              required:
                - email
                - password
                - language
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthDto"
  /api/auth/login:
    post:
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  example: 2LQ9VRVCQ
              required:
                - email
                - password
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthDto"
  /api/auth/refresh:
    get:
      tags:
        - Auth
      security: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ4Y3Jvd25sZXNzQG1haWwucnUiLCJyb2xlcyI6WyJBRE1JTiJdLCJpYXQiOjE3Mzg1OTQxNzMsImV4cCI6ODgxMzg1OTQxNzN9.dmQAXWl2nvmgrKjL41XsuQXkC7efWpaNwYD9yuW9Bfc
  /api/auth/logout:
    get:
      tags:
        - Auth
      security: []
      responses:
        "200":
          description: "Success"
  /api/auth/resend-verification:
    get:
      tags:
        - Auth
      responses:
        "200":
          description: "Success"
  /api/auth/verify-email:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  type: string
                  example: 157014
      responses:
        "200":
          description: "Success"
  /api/auth/send-recovery:
    post:
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: "Success"
  /api/auth/verify-recovery:
    post:
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                code:
                  type: string
                  example: 157014
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                    example: 157014
  /api/auth/recovery-password:
    post:
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                code:
                  type: string
                  example: 157014
                password:
                  type: string
                  example: 2LQ9VRVCQ
      responses:
        "200":
          description: "Success"
  /api/auth/change-password:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              properties:
                oldPassword:
                  type: string
                  example: 2LQ9VRVCQ
                newPassword:
                  type: string
                  example: 9YYUCCPLO
      responses:
        "200":
          description: "Success"
  /api/admin/upload:
    post:
      tags:
        - Admin Upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileDto"
  /api/upload:
    post:
      tags:
        - File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: The file must be an image of up to 2 MB with a 1-to-1 aspect ratio.
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileDto"
  /static/{fileName}:
    get:
      tags:
        - File
      security: []
      parameters:
        - name: fileName
          in: path
          required: true
          schema:
            type: string
            example: 42c193f6-1ccc-4376-aef7-4f302817adc3.png
      responses:
        "200":
          description: "Success"
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/admin/team:
    post:
      tags:
        - Admin Team
      requestBody:
        $ref: "#/components/requestBodies/Team"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  employee:
                    $ref: "#/components/schemas/TeamResponseDto"
  /api/admin/team/{teamId}:
    get:
      tags:
        - Admin Team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  employee:
                    $ref: "#/components/schemas/TeamResponseDto"
    patch:
      tags:
        - Admin Team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/Team"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  employee:
                    $ref: "#/components/schemas/TeamResponseDto"
    delete:
      tags:
        - Admin Team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  employee:
                    $ref: "#/components/schemas/TeamResponseDto"
  /api/team/:
    get:
      tags:
        - Team
      security: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  team:
                    type: array
                    items:
                      $ref: "#/components/schemas/TeamResponseDto"
  /api/user:
    get:
      tags:
        - User
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  user:
                    $ref: "#/components/schemas/UserDto"
    patch:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstName:
                  type: string
                  example: Rob
                lastName:
                  type: string
                  example: Top
                phone:
                  type: string
                  example: +79123456789
                allergies:
                  type: string
                  example: "Морковь"
              required:
                - firstName
                - lastName
                - phone
                - allergies
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  user:
                    $ref: "#/components/schemas/UserDto"
  /api/user/address:
    get:
      tags:
        - User
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  primaryAddress:
                    $ref: "#/components/schemas/AddressResponseDto"
                  otherAddresses:
                    type: array
                    items:
                      $ref: "#/components/schemas/AddressResponseDto"
    post:
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  address:
                    $ref: "#/components/schemas/AddressResponseDto"
  /api/user/address/{addressId}:
    patch:
      tags:
        - User
      parameters:
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  address:
                    $ref: "#/components/schemas/AddressResponseDto"
    delete:
      tags:
        - User
      parameters:
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  address:
                    $ref: "#/components/schemas/AddressResponseDto"
  /api/user/address/{addressId}/toggle-primary:
    patch:
      tags:
        - User
      parameters:
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  address:
                    $ref: "#/components/schemas/AddressResponseDto"
  /api/review:
    post:
      tags:
        - Review
      requestBody:
        content:
          application/json:
            schema:
              properties:
                picture:
                  type: string
                  example: http://localhost:8080/api/static/42c193f6-1ccc-4376-aef7-4f302817adc3.png
                author:
                  type: string
                  example: Иван Иванов
                text:
                  type: string
                  example: Отзыв
                language:
                  type: string
                  enum:
                    - RU
                    - HE
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  review:
                    $ref: "#/components/schemas/ReviewResponseDto"
    get:
      tags:
        - Review
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                  allOf:
                    - properties:
                        reviews: 
                          type: array
                          items:
                            $ref: "#/components/schemas/ReviewResponseDto"
                    - $ref: "#/components/schemas/PaginationBodyFields"
  /api/admin/review:
    post:
      tags:
        - Admin Review
      requestBody:
        $ref: "#/components/requestBodies/AdminReview"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  review:
                    $ref: "#/components/schemas/ReviewResponseDto"
    get:
      tags:
        - Admin Review
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: published
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                  allOf:
                    - properties:
                        reviews: 
                          type: array
                          items:
                            $ref: "#/components/schemas/ReviewResponseDto"
                    - $ref: "#/components/schemas/PaginationBodyFields"
  /api/admin/review/{reviewId}:
    get:
      tags:
        - Admin Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  review:
                    $ref: "#/components/schemas/ReviewResponseDto"
    patch:
      tags:
        - Admin Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/AdminReview"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  review:
                    $ref: "#/components/schemas/ReviewResponseDto"
    delete:
      tags:
        - Admin Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  review:
                    $ref: "#/components/schemas/ReviewResponseDto"
  /api/admin/review/{reviewId}/toggle-publish:
      patch:
        tags:
          - Admin Review
        parameters:
          - name: reviewId
            in: path
            required: true
            schema:
              type: integer
        responses:
          "200":
            description: "Success"
            content:
              application/json:
                schema:
                  properties:
                    review:
                      $ref: "#/components/schemas/ReviewResponseDto"
  /api/dish/type:
    get:
      tags:
        - Dish
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  dishTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/DishTypeResponseDto"
  /api/admin/dish:
    post:
      tags:
        - Admin Dish
      requestBody:
        $ref: "#/components/requestBodies/Dish"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                  review:
                    $ref: "#/components/schemas/DishResponseDto"
    get:
      tags:
        - Admin Dish
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
        - name: search
          in: query
          required: false
          schema:
            type: string
            example: Цезарь
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                  allOf:
                    - properties:
                        dishes: 
                          type: array
                          items:
                            $ref: "#/components/schemas/DishResponseDto"
                    - $ref: "#/components/schemas/PaginationBodyFields"
  /api/admin/dish/{dishId}:
    get:
      tags:
        - Admin Dish
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                    dish: 
                      $ref: "#/components/schemas/DishResponseDto"
    patch:
      tags:
        - Admin Dish
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/Dish"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                    dish: 
                      $ref: "#/components/schemas/DishResponseDto"
    delete:
      tags:
        - Admin Dish
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                properties:
                    dish: 
                      $ref: "#/components/schemas/DishResponseDto"